
CALL {
    LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/Jean-Tshibangu-jtm/Formation/main/TP%20NoSQL/data/users.csv' AS users
    CREATE (u:User {
        id: toInteger(users.id),
        sex: users.sex,
        age: toInteger(users.age),
        occupation: users.occupation,
        zip_code: users.zip_code
    })
} IN TRANSACTIONS;



CALL {
   LOAD CSV WITH HEADERS FROM
   'https://raw.githubusercontent.com/Jean-Tshibangu-jtm/Formation/main/TP%20NoSQL/data/genres.csv' AS genres
   WITH genres
   WHERE genres.id IS NOT NULL AND genres.name IS NOT NULL
   CREATE (u:Genre {id: toInteger(genres.id), name: genres.name})
} IN TRANSACTIONS;



LOAD CSV WITH HEADERS FROM
'https://raw.githubusercontent.com/Jean-Tshibangu-jtm/Formation/main/TP%20NoSQL/data/mov_genre.csv' AS mov_genre
WITH mov_genre
WHERE mov_genre.mov_id IS NOT NULL AND mov_genre.genre IS NOT NULL
MERGE (m:Movie { id: toInteger(mov_genre.mov_id) })
MERGE (g:Genre { id: toInteger(mov_genre.genre) })
CREATE (m)-[:CATEGORIZED_AS]->(g);




LOAD CSV WITH HEADERS FROM
'https://raw.githubusercontent.com/Jean-Tshibangu-jtm/Formation/main/TP%20NoSQL/data/ratings.csv' AS ratings
WITH ratings
WHERE ratings.user_id IS NOT NULL 
  AND ratings.mov_id IS NOT NULL 
  AND ratings.rating IS NOT NULL 
  AND ratings.timestamp IS NOT NULL
MERGE (u:User { id: toInteger(ratings.user_id) })
MERGE (m:Movie { id: toInteger(ratings.mov_id) })
CREATE (u)-[:RATED { 
    note: toInteger(ratings.rating), 
    timestamp: toInteger(ratings.timestamp) 
}]->(m);


LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/Jean-Tshibangu-jtm/Formation/main/TP%20NoSQL/data/friends.csv' AS friends
WITH friends
WHERE friends.user1_id IS NOT NULL AND friends.user2_id IS NOT NULL
MERGE (u1:User { id: toInteger(friends.user1_id) })
MERGE (u2:User { id: toInteger(friends.user2_id) })
CREATE (u1)-[:FRIEND_OF]->(u2);

CALL {
    LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/Jean-Tshibangu-jtm/Formation/main/TP%20NoSQL/data/movies.csv' AS movies
    WITH movies
    WHERE movies.id IS NOT NULL AND trim(movies.id) <> ''
    MERGE (m:Movie {id: toInteger(movies.id)})
    ON CREATE SET m.title = movies.title, m.date = toInteger(movies.date)
    ON MATCH SET m.date = toInteger(movies.date)  
} IN TRANSACTIONS;


